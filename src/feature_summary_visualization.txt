options(encoding = "sjis")

curdir = getwd()
setwd( paste(curdir, "/work", sep=""))
putpng_path= paste(curdir, "/images/", sep="")


source("../src/predictive_maintenance_funcs.r")
source("parameters.r")

find_closest_factors <- function(n) {
  sqrt_n <- floor(sqrt(n))
  for (i in sqrt_n:1) {
    if (n %% i == 0) {
      return(c(i, n/i))
    }
  }
}

sigin_arg = '+'
tracking_feature_= '処理導電率'

initial_pm(sigin_arg)
abnormality_detected_data <- FALSE
watch_name <<- paste(tracking_feature_, "..", sep="")

sigin <<- 1.0
if ( sigin_arg == '-' )
{
	sigin <<- -1.0
}
#平滑化をlowessで行う
use_lowess = TRUE

smooth_window <<- 0
smooth_window_slide <<- 0
smooth_window2 <<- 100
smooth_window_slide2 <<- 10
lookback <<- 50
lookback_slide <<- 10

timeStamp = '監視日時'
#df2 <- read.csv( '../testmini.csv', header=T, stringsAsFactors = F, na.strings = c("", "NA"))
df2 <- get_data_frame('../testmini.csv', timeStamp)

str(df2)
timeCol <- df2$監視日時
df2$監視日時 <- NULL
df2$time_index <- c(1:(nrow(df2)))


	#前半80%を正常データとして訓練
	mahalanobis_train <- df2[1:(nrow(df2))*0.8,]
	m_mahalanobis <<- anomaly_detection_train(mahalanobis_train[colnames(mahalanobis_train)!="time_index"])

	mahalanobis_test <- anomaly_detection_test(m_mahalanobis, mahalanobis_train[colnames(mahalanobis_train)!="time_index"])
	plot(mahalanobis_test[[2]], type="l")
	mahalanobis_df <- data.frame(
			time_index=c(1:length(mahalanobis_test[[2]])), 
			Abnormality=as.vector(mahalanobis_test[[2]]))

	threshold_ = max(mahalanobis_df["Abnormality"])
	print(sprintf("threshold:%f", threshold_))
	flush.console()
	plt_abnormality <- mahalanobis_df %>% ggplot(aes(x=time_index,y=Abnormality)) + geom_line()
	plt_abnormality
	
	#特徴量生成
	#後半10%から特徴量を推定
	feature_train <- df2[(nrow(df2) - (nrow(df2))*0.9):nrow(df2),]
	#feature_df <- feature(df2, lookback=lookback)
	#print(sprintf("%d/%d nrow(feature_df):%d", i, as.integer(nrow(df)/one_input),nrow(feature_df)))
	print("feature_df")
	print(colnames(feature_df))

	feature_df <- feature(df2, lookback=lookback, slide_window = lookback_slide)
	
	feature_df <- smooth(feature_df, smooth_window = smooth_window2, smooth_window_slide=smooth_window_slide2)
str(feature_df)

	#各特徴量のmonotonicity算出
	fm <- feature_monotonicity(feature_df, monotonicity_num=nrow(feature_df))
	fm <- rbind(fm, c(1:ncol(fm)))

	#各特徴量のパラメータ並べ替え
	print("fm")
	print(colnames(fm))
	f1 <- data.frame(matrix(colnames(fm)),ncol=1)[,1]
	f2 <- cbind(f1, data.frame(as.numeric(fm[1,]),ncol=1))[,1:2]
	f2 <- cbind(f2, data.frame(as.numeric(fm[2,]),ncol=1))[,1:3]
	colnames(f2) <- c("feature", "monotonicity", "index")
	print(f2)

	#monotonicity毎の棒グラフ
	xlab=sprintf("feature [total number of features:%d]", nrow(f2)-1)
	plt0 <- f2 %>% ggplot(aes(x = reorder(feature,-monotonicity), y = monotonicity, fill = feature))+ geom_bar(stat = "identity")+ theme(legend.position = 'none')+xlab(xlab)+ theme(axis.text.x = element_blank())
	plt0
	
	#monotonicityの大きい順にソート
	leave_num = 5
	fm2 <- f2[order(f2$monotonicity, decreasing=T),][1:leave_num,]
	print("fm2")
	print(colnames(fm2))
	flush.console()
	

	fm22 <- rbind(fm2, f2[f2$feature=="mahalanobis",])
	fm22[fm22$feature=="mahalanobis",]$feature = "abnormality"
	#monotonicity毎の棒グラフ
	plt1 <- fm22 %>% ggplot(aes(x = reorder(feature,-monotonicity), y = monotonicity, fill = feature))+ geom_bar(stat = "identity")+xlab(sprintf("feature top %d & abnormality",leave_num))+
	geom_text(aes(label = ifelse(monotonicity > 0.001 ,as.integer(monotonicity*1000)/1000,monotonicity)), size = 4, hjust = 0.5, vjust = 2, position = "stack") 
	
	plt1
	
	tracking_feature <<- c()
	for ( i in 1:(leave_num) )
	{
		tracking_feature <<- c(tracking_feature,colnames(feature_df)[fm2$index[i]])
	}
	if ( !length(which("mahalanobis" == tracking_feature)))
	{
		tracking_feature <<- c(tracking_feature,"mahalanobis")
	}
	print(tracking_feature)
	
	features_plot(tracking_feature)
	
	if ( is.null(tracking_feature))
	{
		if ( nrow(feature_df) > 2000 )
		{
			x <- feature_df[(nrow(feature_df)-1000):nrow(feature_df),]
		}else
		{
			x <- feature_df[1:nrow(feature_df),]
		}
		x <- reshape2::melt(x, id.vars=c("time_index"), measure.vars=colnames(x)[2:length(x)], 
						variable.name="key",value.name="target")
		p <- x %>% 
		  ggplot(aes(x = time_index, y = target, color=key))+
		  geom_line()
	}else
	{
		x <- feature_df[c("time_index",tracking_feature)]
		x <- reshape2::melt(x, id.vars=c("time_index"), measure.vars=colnames(x)[2:length(x)], 
						variable.name="key",value.name="target")
		p <- x %>% 
		  ggplot(aes(x = time_index, y = target, color=key))+
		  geom_line()
	}
	plot(p)

# library(patchwork)
 library(cowplot)

 
		x <- feature_df[1:nrow(feature_df),]
		x <- reshape2::melt(x, id.vars=c("time_index"), measure.vars=colnames(x)[2:length(x)], 
						variable.name="key",value.name="target")
		
		pltlist <- NULL	
		for ( i in 1:length(colnames(df2)))
		{
			if ( colnames(df2)[i] == "time_index" )
			{
				next
			}
			ptn <- paste("^", colnames(df2)[i],sep='') 
			p <- x %>% filter(str_detect(key,ptn)) %>%
			  ggplot(aes(x = time_index, y = target, color=key))+
			  geom_line()
			pltlist <- c(pltlist, list(p))
		}
		
		plt <- plot_grid(plotlist = pltlist)

	n = find_closest_factors(length(pltlist))
	if ( n[1] == 1 && length(pltlist) > 1) n = find_closest_factors(length(pltlist)+1)
	
	plt <- plot_grid(plotlist = pltlist, nrows = n[1])

	print(plt)
	ggsave(filename="xxx.png", plt, limitsize=F, width = 16, height = 9)

